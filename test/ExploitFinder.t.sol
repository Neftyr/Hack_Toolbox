// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import {StdCheats} from "forge-std/StdCheats.sol";
import {Test, console} from "forge-std/Test.sol";
import {Vm} from "forge-std/Vm.sol";

contract ExploitFinder is StdCheats, Test {
    event ExploitFinder__TargetHacked();

    address private constant TARGET = 0x0aEd31F9Be33403A0D38d886d8b1199996F2A864;
    address private constant HUNTED = 0xaFa4150818b7843345A5E54E430Bd0cAE31B5c0C;
    address private constant HACKER = 0x50e2a33B9E04e78bF1F1d1F94b0be95Be63C23e7;

    uint256 deployerKey = vm.envUint("PRIVATE_KEY");

    function setUp() external {}

    function testFindExploit(uint256 randomNumber) external {
        vm.startBroadcast(deployerKey);

        vm.expectRevert();
        (bool success, ) = TARGET.call(abi.encodeWithSignature("addTen(uint256)", randomNumber));
        if (success) emit ExploitFinder__TargetHacked();

        vm.stopBroadcast();
    }

    function isUint128(uint256 num) public pure returns (bool) {
        uint128 maxValue = 2 ** 128 - 1;
        return num <= maxValue;
    }

    function isUint256(uint256 number) public pure returns (bool) {
        if (type(uint256).max >= number) {
            return true;
        } else {
            return false;
        }
    }
}
